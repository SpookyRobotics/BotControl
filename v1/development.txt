Since college, I have not had the chance to program any embedded systems I fully understood. After spending five years at Carnegie Mellon building prototypes of circuits studied in class, or theorizing on the best course of operation for a controls system, I was glad to get an Android programming job and not have to worry about the hardware model of my system. I would still self identify as a C programmer, and would daydream about embedding native code into my Android applications. For the most part I resigned myself to read C code, and live in the JVM world.

This complacency was dispelled after a walk in MicroCenter. I have a MicroCenter addiction. I can wonder the aisles of the microcontrollers, sensors, and chips coming up with new designs on how to solve a problem, or how to build a special purpose embedded system. On two of the shelves were packages that screamed I must buy them. They were the following: 

[image: sensors_kit] [image: parallax microcontroller]

I bought these items, with the purpose of determining what generic system I could build for under $100.

I did not realize that I had bought a 3.3V I/O compatible microcontroller, and 5V sensors. Hence my part list soon grew to this in total:

[parts list]

The Parallax microcontroller is completely open source, and hence I deemed it only appropriate for me to open source this code base, and document my experience in learning a new architecture. With 8 cogs, each able to run a separate program, I decided to build a framework that would allow maximum uses of the processors I/O, with minimum usage of the 8 cogs. The resulting application would need to be easily modifiable to adjust to changes in environment. The entire application should fit in under 11Kb of memory, which is 1/3 of the on board ram for the processor. 

The resulting BotControl application:
Uses 2 cogs, one for control of all input channels and one for control of all output channels.
Can optionally use a third cog for scheduling functions to run at a given frequency
With the hardware configuration files for 2 circuit, fits in under 10Kb of memory

BotControl has a configuration for the Parallax QuickStart board, and for the breadboard configuration using the Arduino sensors. 

The parts list for the breadboard:

- Buzzer (passive)
- IR collision detector
- Laser module
- RGB LED 
- 3W White LED 
- Magnetic reed switch

And the schematic:

[schematic of breadboard]

BotControl Kernel

To distinguish between the static functions of the C program that operate I/O and timing, and the config files unique to the circuit the P832XA is attached two, I will refer to the static functions as the kernel, and the rest as config files.

The Kernel is primarily contained in cogDefinitions.h and cogDefinitions.c. The header file statically defines the 8 programs that will run on each cog. When using the default cog1 and cog2 programs, the sensors array and effectors array that are defined by the Config files are continuously looped through and their service functions are called. By adjusting the sensors and effectors definition, it's possible to handle as many I/O operations as can fit in memory. 

The user can also use the default timer cog program to schedule a no argument function to run after every N cog ticks.

The result of each sensor function is bitwise ORd and written to the SENSOR_TRIGGER_MAP variable, which is the input to each effector function. This design enables synchronous updates of all sensor values to all other functions in the application.

The timer cog functions each take no parameters, and are packed into an array specifying the number of TIMER_COG_OFFSET_TICKS between runs. Hence the value of TimedFunctionEntry.startCount * TIMER_COG_OFFSET_TICKS equals the minimum number of clock cycles before a function repeats. This setup allows fine tuning the frequency of time critical operations.

It is important to remember that all the service functions are called consecutively by the default cog1, cog2 and timer programs. Hence it is important to not queue any functions that call pause or sleep, as it will add a fixed delay to any functions called after it. There are 5 other cogs available for functions that must stop execution of a program.

Configuration Files

There are two configuration setups in this example of BotControl, one for the DIP package used on the breadboard and one for QuickStart development board. For the QuickStart board, files quickStart.c and quickStart.h, there are 8 effectors, one for each blue led, and 8 sensors, one for each touch sensor.

The breadboard config files contain 2 sensor structs for the magnetic reed switch and the IR collision detector, and 6 effector structs for control of the leds and speaker.

The difficult design decisions made in this project stem from how easily switch between configurations. Although it is not pretty, the current configuration change involves a process of adjusting #defines and commenting out code. It will surely need to be revised in the future, but for current purposes will suffice.

* TODO adjust build config to use makefiles 

In each config c file, startup code is between two comments like so
 /*Startup */ code /*End Startup*/. By copying the #define statements to config.h and adding or removing the startup comment code, one can enable or disable a separate configuration. I submitted two commits to github showing the different configurations for anyone verifying operation. 

